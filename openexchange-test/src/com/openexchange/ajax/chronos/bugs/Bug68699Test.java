/*
 *
 *    OPEN-XCHANGE legal information
 *
 *    All intellectual property rights in the Software are protected by
 *    international copyright laws.
 *
 *
 *    In some countries OX, OX Open-Xchange, open xchange and OXtender
 *    as well as the corresponding Logos OX Open-Xchange and OX are registered
 *    trademarks of the OX Software GmbH. group of companies.
 *    The use of the Logos is not covered by the GNU General Public License.
 *    Instead, you are allowed to use these Logos according to the terms and
 *    conditions of the Creative Commons License, Version 2.5, Attribution,
 *    Non-commercial, ShareAlike, and the interpretation of the term
 *    Non-commercial applicable to the aforementioned license is published
 *    on the web site http://www.open-xchange.com/EN/legal/index.html.
 *
 *    Please make sure that third-party modules and libraries are used
 *    according to their respective licenses.
 *
 *    Any modifications to this package must retain all copyright notices
 *    of the original copyright holder(s) for the original code used.
 *
 *    After any such modifications, the original and derivative code shall remain
 *    under the copyright of the copyright holder(s) and/or original author(s)per
 *    the Attribution and Assignment Agreement that can be located at
 *    http://www.open-xchange.com/EN/developer/. The contributing author shall be
 *    given Attribution for the derivative code and a license granting use.
 *
 *     Copyright (C) 2016-2020 OX Software GmbH
 *     Mail: info@open-xchange.com
 *
 *
 *     This program is free software; you can redistribute it and/or modify it
 *     under the terms of the GNU General Public License, Version 2 as published
 *     by the Free Software Foundation.
 *
 *     This program is distributed in the hope that it will be useful, but
 *     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *     or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 *     for more details.
 *
 *     You should have received a copy of the GNU General Public License along
 *     with this program; if not, write to the Free Software Foundation, Inc., 59
 *     Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 */

package com.openexchange.ajax.chronos.bugs;

import static com.openexchange.java.Autoboxing.I;
import java.util.Collections;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Test;
import com.openexchange.ajax.chronos.AbstractChronosTest;
import com.openexchange.ajax.chronos.factory.AttendeeFactory;
import com.openexchange.ajax.chronos.factory.EventFactory;
import com.openexchange.ajax.chronos.itip.ITipUtil;
import com.openexchange.test.common.test.TestClassConfig;
import com.openexchange.testing.httpclient.invoker.ApiClient;
import com.openexchange.testing.httpclient.models.Attendee;
import com.openexchange.testing.httpclient.models.EventData;

/**
 * {@link Bug68699Test}
 *
 * @author <a href="mailto:daniel.becker@open-xchange.com">Daniel Becker</a>
 * @since v7.10.4
 */
public class Bug68699Test extends AbstractChronosTest {

    private String summary;
    private ApiClient apiClient2;

    @Override
    public void setUp() throws Exception {
        super.setUp();
        apiClient2 = testUser2.getApiClient();
        summary = "Bug68699Test" + UUID.randomUUID();
    }

    @Override
    public TestClassConfig getTestConfig() {
        return TestClassConfig.builder().createApiClient().withUserPerContext(2).useEnhancedApiClients().build();
    }

    @Test(expected = AssertionError.class)
    public void testBug68699() throws Exception {
        try {
            /*
             * Create event with no location set
             */
            Attendee attendee = AttendeeFactory.createIndividual(I(testUser2.getUserId()));
            EventData event = EventFactory.createSingleTwoHourEvent(getCalendaruser(), summary, folderId);
            event.setFolder(folderId);
            event.setAttendees(Collections.singletonList(attendee));
            event.setLocation(null);
            event = eventManager.createEvent(event, true);

            /*
             * Update event with empty location
             */
            EventData deltaEvent = new EventData();
            deltaEvent.setId(event.getId());
            deltaEvent.setFolder(event.getFolder());
            deltaEvent.setLocation("");
            deltaEvent.setAttendees(event.getAttendees());
            deltaEvent.setAttachments(null); // Suppress empty list generated by client

            eventManager.updateEvent(deltaEvent);
        } catch (Exception e) {
            Assert.fail(e.getMessage());
        }
        /*
         * Expect that there is no mail and util throws AssertionError
         */
        ITipUtil.receiveNotification(apiClient2, testUser.getLogin(), "Appointment changed: " + summary);
    }
}
